:- module('italian_citizen_new',[]).

en("the target language is: prolog.

the templates are:
*a person* is an italian citizen,
*a person* is an italian citizen by birth,
*a person* is unknown,
*a person* is stateless,
*a person* is born in italy,
*a person* is the parent of *a person*,
*a person* is the father of *a person*,
*a person* is the mother of *a person*,
*a person* does not follow the citizenship of *a person*.

the knowledge base italian_citizen_new includes:

a person A is an italian citizen
if the person A is an italian citizen by birth.

a person A is an italian citizen by birth
if a person B is the parent of A
and B is an italian citizen.
    
a person A is the parent of a person B
if A is the father of B
	or A is the mother of B.

a person A is an italian citizen by birth
if A is born in italy
and for all cases in which
    a person B is the parent of A
    it is the case that
    B is stateless
        or B is unknown
        or A does not follow the citizenship of B.
    
% add as many as you need    
scenario giuseppe is:
felice is the father of giuseppe.
tatiana is the mother of giuseppe.
felice is an italian citizen.
tatiana is an italian citizen.
    
scenario luca is:
luca is born in italy.

% add as many as you need    
query one is:
which person is an italian citizen by birth.


").

/** <examples>
?- answer("query one with scenario one").
?- answer("query three with scenario one").
?- answer("query two with scenario one").
*/
